{"version":3,"sources":["Store.js","styles.js","PersonalInfo.js","Languages.js","SkillChart.js","MainInfo.js","ModeSwitch.js","Sidebar.js","ProjectCard.js","Projects.js","TabPanel.js","formatDate.js","Education.js","Experience.js","TabsInfo.js","App.js","Theme.js","serviceWorker.js","index.js"],"names":["StoreContext","createContext","styles","makeStyles","root","width","fill","name","fontSize","label","weight","fontWeight","header","paddingTop","pinkColor","color","Profiles","props","profiles","profilesArray","map","profile","index","ListItem","key","dense","Link","href","url","network","Fragment","PersonalInfo","context","useContext","basics","data","language","classes","List","className","divider","ListItemAvatar","style","paddingRight","Avatar","src","height","ListItemText","primary","secondary","summary","website","email","phone","Languages","languages","item","Typography","padBot","Grid","container","justify","spacing","wrap","Divider","orientation","scale","level","gridItem","fluency","borderColor","SkillChart","theme","useTheme","canvasRef","useRef","skillLabels","skills","skill","filter","skillLevels","useEffect","Chart","defaults","global","defaultFontColor","palette","text","defaultFontFamily","current","type","options","responsive","angleLines","display","ticks","suggestedMin","suggestedMax","legend","position","fontColor","contrastText","title","maintainAspectRatio","aspectRatio","tooltips","callbacks","tooltipItem","labels","datasets","backgroundColor","main","ref","MainInfo","Paper","xs","md","align","variantMapping","h3","Tooltip","Box","margin","useStyles","switchBase","grey","checked","track","ModeSwitch","FormGroup","row","FormControlLabel","control","Switch","darkMode","onChange","event","setDarkMode","target","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","ProjectCard","Card","elevation","CardMedia","component","alt","image","imgUrl","CardContent","gutterBottom","variant","description","flexwrap","keywords","keyword","Chip","CardActions","Button","size","demoUrl","disabled","codeUrl","Projects","projects","project","sm","img","demo","code","TabPanel","children","value","other","role","hidden","id","p","formatDate","date","Date","toLocaleDateString","year","month","flexDirection","Education","education","school","ExpansionPanel","ExpansionPanelSummary","content","expandIcon","aria-controls","startDate","endDate","area","studyType","ExpansionPanelDetails","institution","desc","courses","point","ListItemIcon","expanded","marginBottom","Experience","work","job","company","highlights","TabsInfo","useState","setValue","colors","Container","maxWidth","square","Tabs","newValue","setPrimaryColor","indicatorColor","textColor","centered","Tab","icon","axis","direction","onChangeIndex","dir","App","error","setError","isLoaded","setIsLoaded","setData","setLanguage","primaryColor","prefersDarkMode","useMemo","createMuiTheme","tonalOffset","Theme","useMediaQuery","fetch","then","response","json","result","message","Provider","ThemeProvider","CssBaseline","AppBar","Toolbar","IconButton","edge","aria-label","flexGrow","fixed","LinearProgress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.24ad677b.chunk.js","sourcesContent":["\r\nimport { createContext } from 'react';\r\n\r\nconst StoreContext = createContext();\r\n\r\nexport { StoreContext }\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    fill: {\r\n        width: '100%',\r\n    },\r\n    name: {\r\n        fontSize: '1.6rem',\r\n    },\r\n    label: {\r\n        fontSize: '1.2rem',\r\n    },\r\n    weight: {\r\n        fontWeight: 100,\r\n    },\r\n    header: {\r\n        paddingTop: '1.5rem',\r\n        fontSize: '1.2rem'\r\n    },\r\n    pinkColor: {\r\n        color: 'hotpink'\r\n    }\r\n\r\n}));\r\n\r\nexport { styles }","import React, { useContext } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { Link } from '@material-ui/core';\r\nimport { StoreContext } from './Store';\r\nimport { styles } from './styles';\r\n\r\nconst Profiles = (props) => {\r\n  const profiles = props.profilesArray.map((profile, index) =>\r\n    <ListItem key={index} dense>\r\n      <Link color='primary' href={profile.url}>{profile.network}</Link>\r\n    </ListItem>\r\n  );\r\n  return (\r\n    <React.Fragment>\r\n      {profiles}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst PersonalInfo = () => {\r\n  const context = useContext(StoreContext)\r\n  const basics = context.data[context.language].basics\r\n  const classes = styles();\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      <ListItem divider>\r\n        <ListItemAvatar style={{ paddingRight: '1rem' }}>\r\n          <Avatar src={``} style={{ height: '6rem', width: '6rem' }}>\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText classes={{\r\n          primary: classes.name,\r\n          secondary: classes.label\r\n        }} primary={basics.name} secondary={basics.label} />\r\n      </ListItem>\r\n      <ListItem dense >\r\n        <ListItemText primary=\"About me\" secondary={basics.summary} />\r\n      </ListItem>\r\n      <ListItem dense >\r\n        <Link fontWeight=\"300\" href={basics.website} >{basics.website}</Link>\r\n      </ListItem>\r\n      <ListItem dense >\r\n        <ListItemText primary=\"E-mail:\" secondary={basics.email} />\r\n      </ListItem>\r\n      <ListItem dense >\r\n        <ListItemText primary=\"Phone\" secondary={basics.phone} />\r\n      </ListItem>\r\n      <Profiles profilesArray={basics.profiles} />\r\n    </List >\r\n  );\r\n}\r\n\r\nexport { PersonalInfo }","import React, { useContext } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport { Typography, Grid, Divider } from '@material-ui/core';\r\nimport { StoreContext } from './Store';\r\nimport { styles } from './styles';\r\n\r\nconst Languages = () => {\r\n    const classes = styles();\r\n    const context = useContext(StoreContext)\r\n\r\n    const languages = context.data[context.language].languages.map((item, index) =>\r\n        <List key={index}>\r\n\r\n            <ListItem >\r\n                <Typography >\r\n                    {item.language}\r\n                </Typography>\r\n            </ListItem>\r\n            <ListItem className={classes.padBot}>\r\n                <Grid\r\n                    container\r\n                    justify='space-between'\r\n                    spacing={1}\r\n                    wrap='nowrap'\r\n                >\r\n                    <Grid>\r\n                        <Divider orientation='vertical'></Divider>\r\n                    </Grid>\r\n                    {item.scale.map((level, index) => {\r\n                        let gridItem\r\n                        if (index <= item.fluency) {\r\n                            gridItem = (\r\n                                <Grid item className={classes.borderColor}>\r\n                                    <Typography color='primary'>{level}</Typography>\r\n                                </Grid>\r\n                            )\r\n                        } else {\r\n                            gridItem = (\r\n                                <Grid item className={classes.borderColor}>\r\n                                    <Typography className={classes.weight}>{level}</Typography>\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                        return (\r\n                            <React.Fragment key={index}>\r\n                                {gridItem}\r\n                                <Grid>\r\n                                    <Divider orientation='vertical'></Divider>\r\n                                </Grid>\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                    )}\r\n                </Grid>\r\n            </ListItem>\r\n        </List >\r\n\r\n    );\r\n    return (\r\n        <React.Fragment>\r\n            <List className={classes.root}>\r\n                {languages}\r\n            </List >\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport { Languages }","import React, { useContext, useRef, useEffect } from 'react'\r\nimport Chart from 'chart.js'\r\nimport { StoreContext } from './Store';\r\nimport { useTheme } from '@material-ui/core';\r\n\r\nconst SkillChart = () => {\r\n  const theme = useTheme();\r\n  const canvasRef = useRef();\r\n  const context = useContext(StoreContext)\r\n\r\n  const skillLabels = context.data[context.language].skills\r\n    .map(skill => skill.name)\r\n    .filter(skill => skill !== 'Others')\r\n  const skillLevels = context.data[context.language].skills\r\n    .map(skill => skill.level)\r\n    .filter(skill => !!skill)\r\n\r\n  // console.log(skillLabels)\r\n  // console.log(skillLevels)\r\n  useEffect(() => {\r\n    Chart.defaults.global.defaultFontColor = theme.palette.text.primary;\r\n    Chart.defaults.global.defaultFontFamily = \"Roboto\";\r\n\r\n    new Chart(canvasRef.current, {\r\n      type: 'radar',\r\n      options: {\r\n        responsive: true,\r\n        scale: {\r\n          angleLines: {\r\n            display: false\r\n          },\r\n          ticks: {\r\n            suggestedMin: 0,\r\n            suggestedMax: 70\r\n          },\r\n        },\r\n        legend: {\r\n          position: 'bottom',\r\n          fontColor: theme.palette.primary.contrastText,\r\n\r\n        },\r\n        title: {\r\n\r\n          fontColor: theme.palette.primary.contrastText,\r\n        },\r\n        maintainAspectRatio: true,\r\n        aspectRatio: 1,\r\n        tooltips: {\r\n          callbacks: {\r\n            title: function (tooltipItem, data) {\r\n              return data['labels'][tooltipItem[0]['index']];\r\n            },\r\n            label: function (tooltipItem, data) {\r\n              return data['datasets'][0]['data'][tooltipItem['index']] + '/100';\r\n            },\r\n          },\r\n        },\r\n      },\r\n      data: {\r\n        labels: skillLabels,\r\n        datasets: [{\r\n          label: 'Current skill levels',\r\n          data: skillLevels,\r\n          backgroundColor: theme.palette.primary.main,\r\n          borderColor: theme.palette.primary.main,\r\n          fill: false\r\n\r\n        }]\r\n      }\r\n    }, [theme])\r\n  });\r\n\r\n  return <canvas style={{ width: '100%' }} ref={canvasRef} />;\r\n}\r\n\r\nexport { SkillChart }","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { PersonalInfo } from './PersonalInfo';\r\nimport { Languages } from './Languages';\r\nimport { SkillChart } from './SkillChart';\r\nimport { Box, Tooltip } from '@material-ui/core';\r\nimport { styles } from './styles';\r\n\r\nconst MainInfo = () => {\r\n  const classes = styles()\r\n  return (\r\n    <Paper >\r\n      <Grid container spacing={5}>\r\n        <Grid item xs={12} md={4} align=\"center\">\r\n          <PersonalInfo />\r\n        </Grid>\r\n        <Grid item xs={12} md={4} align=\"center\">\r\n          <Typography className={classes.header} variantMapping={{ h3: \"h3\" }}>Languages</Typography>\r\n\r\n          <Languages />\r\n        </Grid>\r\n        <Grid item xs={12} md={4} align=\"center\">\r\n          <Typography className={classes.header} variantMapping={{ h3: \"h3\" }}>Skills</Typography>\r\n          <Tooltip\r\n            title=\"I am aware that putting some numerical values to skills is not really making much sense. I think about it as 'Subjective assessment of my own skills in relation to each other'. To be honest I added it beacause radar chart looks cool there.\">\r\n            <Box style={{ margin: '1rem' }}>\r\n\r\n              <SkillChart />\r\n            </Box>\r\n          </Tooltip>\r\n        </Grid>\r\n\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n// }\r\n\r\nexport { MainInfo }\r\n","import { makeStyles } from '@material-ui/core'\r\nimport { grey } from '@material-ui/core/colors'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormGroup from '@material-ui/core/FormGroup'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport React, { useContext } from 'react'\r\nimport { StoreContext } from './Store'\r\n\r\nconst useStyles = makeStyles({\r\n  switchBase: {\r\n    '&$checked': {\r\n      color: grey[800],\r\n    },\r\n    '&$checked + $track': {\r\n      backgroundColor: grey[700],\r\n    },\r\n  },\r\n  checked: {},\r\n  track: {},\r\n})\r\n\r\nconst ModeSwitch = () => {\r\n  const context = useContext(StoreContext)\r\n  const classes = useStyles()\r\n\r\n  const handleChange = (event) => {\r\n    context.setDarkMode(event.target.checked)\r\n  }\r\n\r\n  return (\r\n    <FormGroup row>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            classes={{\r\n              switchBase: classes.switchBase,\r\n              checked: classes.checked,\r\n              track: classes.track,\r\n            }}\r\n            checked={context.darkMode}\r\n            onChange={handleChange}\r\n            name=\"dark\"\r\n          />\r\n        }\r\n        label=\"Dark mode\"\r\n      />\r\n    </FormGroup>\r\n  )\r\n}\r\nexport { ModeSwitch }\r\n","import CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport clsx from 'clsx'\r\nimport React from 'react'\r\n\r\n// const drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    // width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    // width: drawerWidth,\r\n    height: 'auto',\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n}))\r\n\r\nconst Sidebar = (props) => {\r\n  const classes = useStyles()\r\n  const theme = useTheme()\r\n  const [open, setOpen] = React.useState(false)\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <div\r\n        style={{\r\n          position: 'fixed',\r\n          top: '1rem',\r\n        }}\r\n      >\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\"\r\n          onClick={handleDrawerOpen}\r\n          className={clsx(classes.menuButton, open && classes.hide)}\r\n        >\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n            }}\r\n          >\r\n            <ChevronRightIcon />\r\n            <ChevronRightIcon />\r\n            <ChevronRightIcon />\r\n          </div>\r\n        </IconButton>\r\n      </div>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n        PaperProps={{ elevation: '10' }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? (\r\n              <ChevronLeftIcon />\r\n            ) : (\r\n              <ChevronRightIcon />\r\n            )}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {React.Children.map(props.children, (child) => {\r\n            return <ListItem>{child}</ListItem>\r\n          })}\r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  )\r\n}\r\nexport { Sidebar }\r\n","import React from 'react'\r\nimport {\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  CardActions,\r\n  Chip,\r\n  Grid,\r\n} from '@material-ui/core'\r\n\r\nconst ProjectCard = (props) => {\r\n  return (\r\n    <Card className={'card'} elevation={4}>\r\n      <CardMedia\r\n        component=\"img\"\r\n        alt=\"Screenshot of project\"\r\n        height=\"100\"\r\n        image={'/resume/' + props.imgUrl}\r\n        title={props.title}\r\n      />\r\n      <CardContent>\r\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n          {props.title}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {props.description}\r\n        </Typography>\r\n        <Grid container justify=\"space-evenly\" flexwrap=\"wrap\">\r\n          {props.keywords.map((keyword, index) => {\r\n            return (\r\n              <Grid style={{ margin: '0.2rem' }} key={index} item>\r\n                <Chip label={keyword} />\r\n              </Grid>\r\n            )\r\n          })}\r\n        </Grid>\r\n      </CardContent>\r\n      <CardActions style={{ justifyContent: 'flex-end' }}>\r\n        <Button\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          href={props.demoUrl}\r\n          target=\"_blank\"\r\n          disabled={props.demoUrl === ''}\r\n        >\r\n          Demo\r\n        </Button>\r\n        <Button\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          href={props.codeUrl}\r\n          target=\"_blank\"\r\n        >\r\n          Code\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  )\r\n}\r\nexport { ProjectCard }\r\n","import React, { useContext } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { StoreContext } from './Store';\r\nimport { ProjectCard } from './ProjectCard';\r\n\r\nconst Projects = (props) => {\r\n  const context = useContext(StoreContext);\r\n  return (\r\n    <div style={{ padding: 10 }}>\r\n      <Grid container spacing={5}>\r\n        {context.data[context.language].projects.map((project, index) => {\r\n          return (\r\n            <Grid item xs={12} sm={6} md={4} align=\"center\" key={index}>\r\n              <ProjectCard\r\n                title={project.title}\r\n                description={project.summary}\r\n                imgUrl={project.img}\r\n                demoUrl={project.demo}\r\n                codeUrl={project.code}\r\n                keywords={project.keywords} />\r\n            </Grid>\r\n          )\r\n        })}\r\n      </Grid>\r\n    </div >\r\n  )\r\n}\r\nexport { Projects }","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Box } from \"@material-ui/core\";\r\n\r\nconst TabPanel = (props) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  TabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n  };\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n\r\n}\r\n\r\n\r\nexport { TabPanel }","const formatDate = (date) => {\r\n  if (date === 'now') {\r\n    return 'now'\r\n  }\r\n  const options = { year: 'numeric', month: 'long' };\r\n  const dateObj = new Date(date)\r\n  const string = dateObj.toLocaleDateString('en-EN', options)\r\n\r\n  return string\r\n}\r\n\r\nexport { formatDate }","import React, { useContext } from 'react';\r\nimport { Grid, ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails, Typography, makeStyles, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport { StoreContext } from './Store';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { formatDate } from './formatDate'\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  summary: {\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n\r\n  },\r\n});\r\n\r\nconst Education = (props) => {\r\n  const { children, value, index, ...other } = props;\r\n  const classes = useStyles();\r\n  const context = useContext(StoreContext);\r\n  return (\r\n    <div style={{ padding: 20 }}\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      {...other}>\r\n      <Grid container spacing={10}>\r\n        {value === index && (\r\n\r\n          context.data[context.language].education.map((school, index) => {\r\n            return (\r\n              <Grid item xs={12} align=\"center\" key={index}>\r\n                <ExpansionPanel\r\n                  variant=\"outlined\"\r\n                >\r\n                  <ExpansionPanelSummary\r\n                    classes={{ content: classes.summary }}\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                  >\r\n                    <Typography\r\n                      className={''}\r\n                      variant={'overline'}\r\n                    >{formatDate(school.startDate) + ' - ' + formatDate(school.endDate)}\r\n                    </Typography>\r\n                    <Typography\r\n                      className={''}\r\n                      variant={'h5'}\r\n                    >{school.area}\r\n                    </Typography>\r\n                    <Typography\r\n                      className={''}\r\n                      variant={'subtitle1'}\r\n                    >\r\n                      {school.studyType}\r\n                    </Typography>\r\n                  </ExpansionPanelSummary>\r\n                  <ExpansionPanelDetails\r\n                    className={classes.summary}\r\n                  >\r\n                    <Typography variant=\"overline\">\r\n                      {school.institution}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body1\"\r\n                      align=\"justify\"\r\n                    >\r\n                      {school.desc}\r\n                    </Typography>\r\n                    <List>\r\n\r\n                      {school.courses.map((point, index) => {\r\n                        return (\r\n                          <ListItem>\r\n                            {point && <ListItemIcon>\r\n                              <ArrowRightIcon></ArrowRightIcon>\r\n                            </ListItemIcon>}\r\n                            <ListItemText key={index}>\r\n                              {point}\r\n                            </ListItemText>\r\n                          </ListItem>\r\n                        )\r\n                      })}\r\n                    </List>\r\n                  </ExpansionPanelDetails>\r\n                </ExpansionPanel>\r\n              </Grid>\r\n            )\r\n          })\r\n        )}\r\n      </Grid>\r\n\r\n    </div >\r\n  )\r\n}\r\nexport { Education }","\r\nimport React, { useContext } from 'react';\r\nimport { Grid, ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails, Typography, makeStyles, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport { StoreContext } from './Store';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { formatDate } from './formatDate'\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  summary: {\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n  },\r\n  expanded: {\r\n    marginBottom: 0\r\n  }\r\n});\r\n\r\nconst Experience = (props) => {\r\n  const { children, value, index, ...other } = props;\r\n  const classes = useStyles();\r\n  const context = useContext(StoreContext);\r\n  return (\r\n    <div style={{ padding: 20 }}\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      {...other}>\r\n      <Grid container spacing={10}>\r\n        {value === index && (\r\n\r\n          context.data[context.language].work.map((job, index) => {\r\n            return (\r\n              <Grid item xs={12} align=\"center\" key={index}>\r\n                <ExpansionPanel\r\n                  elevation={5}\r\n                >\r\n                  <ExpansionPanelSummary\r\n                    classes={{ content: classes.summary }}\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n\r\n                  >\r\n                    <Typography\r\n                      className={''}\r\n                      variant={'overline'}\r\n                    >{formatDate(job.startDate) + ' - ' + formatDate(job.endDate)}\r\n                    </Typography>\r\n                    <Typography\r\n                      className={''}\r\n                      variant={'h5'}\r\n                    >{job.position}\r\n                    </Typography>\r\n                    <Typography\r\n                      className={''}\r\n                      variant={'subtitle1'}\r\n                    >\r\n                      {job.company}\r\n                    </Typography>\r\n                  </ExpansionPanelSummary>\r\n                  <ExpansionPanelDetails\r\n                    className={classes.summary}\r\n                  >\r\n                    <Typography\r\n                      variant=\"body1\"\r\n                      align=\"justify\"\r\n                    >\r\n                      {job.summary}\r\n                    </Typography>\r\n                    <List>\r\n                      {job.highlights.map((point, index) => {\r\n                        return (\r\n                          <ListItem>\r\n                            {point && <ListItemIcon>\r\n                              <ArrowRightIcon></ArrowRightIcon>\r\n                            </ListItemIcon>}\r\n                            <ListItemText key={index}>\r\n                              {point}\r\n                            </ListItemText>\r\n                          </ListItem>\r\n                        )\r\n                      })}\r\n                    </List>\r\n                  </ExpansionPanelDetails>\r\n                </ExpansionPanel>\r\n              </Grid>\r\n            )\r\n          })\r\n        )}\r\n      </Grid>\r\n\r\n    </div >\r\n  )\r\n}\r\nexport { Experience }","import React, { useState, useContext } from 'react';\r\nimport { Paper, Tabs, Tab, useTheme, Container } from '@material-ui/core';\r\n// import { makeStyles } from '@material-ui/core';\r\nimport CodeIcon from '@material-ui/icons/Code';\r\n// import LinkIcon from '@material-ui/icons/Link';\r\n// import GitHubIcon from '@material-ui/icons/GitHub';\r\n// import PaletteIcon from '@material-ui/icons/Palette';\r\n// import HomeIcon from '@material-ui/icons/Home';\r\n// import LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport WorkIcon from '@material-ui/icons/Work';\r\nimport SchoolIcon from '@material-ui/icons/School';\r\nimport { StoreContext } from './Store';\r\nimport { styles } from './styles';\r\nimport { Projects } from './Projects'\r\nimport { TabPanel } from './TabPanel';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { Education } from './Education';\r\nimport { Experience } from './Experience';\r\n\r\n\r\nconst TabsInfo = () => {\r\n  const context = useContext(StoreContext)\r\n  const classes = styles();\r\n  const theme = useTheme();\r\n  const [value, setValue] = useState(0);\r\n  const colors = ['#e91e63', '#0097a7', '#2196f3', '#fdd835']\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n    context.setPrimaryColor(colors[newValue])\r\n  };\r\n\r\n  const handleChangeIndex = (index) => {\r\n    setValue(index);\r\n    context.setPrimaryColor(colors[index])\r\n\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" style={{ padding: 0 }}>\r\n\r\n      <Paper square className={classes.root}>\r\n        <Tabs\r\n          // className={classes.root}\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          centered\r\n\r\n        >\r\n          <Tab icon={<CodeIcon />} label=\"Projects\" />\r\n          <Tab icon={<SchoolIcon />} label=\"Education\" />\r\n          <Tab icon={<WorkIcon />} label=\"Experience\" />\r\n          {/* <Tab icon={<PaletteIcon />} label=\"Skills\" /> */}\r\n        </Tabs>\r\n\r\n        <SwipeableViews\r\n          axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n          index={value}\r\n          onChangeIndex={handleChangeIndex}\r\n        >\r\n\r\n          <TabPanel value={value} index={0} dir={theme.direction}>\r\n            <Projects />\r\n          </TabPanel>\r\n          <TabPanel value={value} index={1} dir={theme.direction}>\r\n            <Education />\r\n          </TabPanel>\r\n          <TabPanel value={value} index={2} dir={theme.direction}>\r\n            <Experience />\r\n          </TabPanel>\r\n          {/* <TabPanel value={value} index={3} dir={theme.direction}>\r\n\r\n                </TabPanel> */}\r\n        </SwipeableViews>\r\n\r\n      </Paper >\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport { TabsInfo }","import { CssBaseline, Grid, useMediaQuery } from '@material-ui/core'\nimport AppBar from '@material-ui/core/AppBar'\nimport Container from '@material-ui/core/Container'\nimport IconButton from '@material-ui/core/IconButton'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { MainInfo } from './MainInfo'\n// import { styles } from './styles';\nimport { ModeSwitch } from './ModeSwitch'\nimport { Sidebar } from './Sidebar'\nimport { StoreContext } from './Store'\nimport { TabsInfo } from './TabsInfo'\nimport { Theme } from './Theme'\n\nfunction App() {\n  const [error, setError] = useState(null)\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [data, setData] = useState({})\n  const [language, setLanguage] = useState('en')\n  const [darkMode, setDarkMode] = useState(false)\n  const [primaryColor, setPrimaryColor] = useState('#e91e63')\n\n  // const classes = styles;\n  const theme = Theme(darkMode, primaryColor)\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)')\n  // check prefered user mode\n  useEffect(() => {\n    setDarkMode(prefersDarkMode)\n\n    fetch('/resume/db.json')\n      // fetch(\"http://localhost:3333/data\")\n      .then((response) => response.json())\n      .then(\n        (result) => {\n          setData(result)\n          setIsLoaded(true)\n        },\n        (error) => {\n          setError(error)\n          setIsLoaded(true)\n        },\n      )\n  }, [prefersDarkMode])\n\n  if (error) {\n    return <div>Error: {error.message}</div>\n  } else if (!isLoaded) {\n    return (\n      <React.Fragment>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <LinearProgress color=\"primary\" />\n        </ThemeProvider>\n      </React.Fragment>\n    )\n  } else {\n    return (\n      <React.Fragment>\n        <StoreContext.Provider\n          value={{\n            data,\n            language,\n            darkMode,\n            setDarkMode,\n            setLanguage,\n            setPrimaryColor,\n          }}\n        >\n          <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                  {/* <MenuIcon /> */}\n                </IconButton>\n                <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n                  Resume\n                </Typography>\n                <ModeSwitch />\n              </Toolbar>\n            </AppBar>\n\n            <Container style={{ paddingTop: '2.5rem' }} fixed>\n              <Grid container spacing={5}>\n                <Grid item>\n                  <MainInfo />\n                </Grid>\n                <Grid item style={{ width: '100%' }}>\n                  <TabsInfo />\n                </Grid>\n              </Grid>\n            </Container>\n          </ThemeProvider>\n        </StoreContext.Provider>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App\n","import { createMuiTheme } from \"@material-ui/core\"\r\nimport { useMemo } from \"react\"\r\n\r\nconst Theme = (prefersDarkMode, primary) => useMemo(\r\n    () =>\r\n        createMuiTheme({\r\n            palette: {\r\n                type: prefersDarkMode ? 'dark' : 'light',\r\n                primary: {\r\n                    main: primary, //'#e91e63'\r\n                },\r\n                secondary: {\r\n                    main: '#2962ff',\r\n                },\r\n                tonalOffset: 0.2,\r\n\r\n\r\n\r\n\r\n            },\r\n        }), [prefersDarkMode, primary],\r\n);\r\n\r\nexport { Theme }\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}